/* C implementation QuickSort */
#include<stdio.h>

// A utility function to swap two elements
void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}

/* This function takes last element as pivot, places
the pivot element at its correct position in sorted
	array, and places all smaller (smaller than pivot)
to left of pivot and all greater elements to right
of pivot */
int partition (int arr[], int low, int high)
{
    int pivot = arr[high]; // pivot
    int i = (low - 1); // Index of smaller element

    for (int j = low; j <= high- 1; j++)
    {
        // If current element is smaller than or
        // equal to pivot
        if (arr[j] <= pivot)
        {
            i++; // increment index of smaller element
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

/* The main function that implements QuickSort
arr[] --> Array to be sorted,
low --> Starting index,
high --> Ending index */
void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        /* pi is partitioning index, arr[p] is now
        at right place */
        int pi = partition(arr, low, high);

        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

/* Function to print an array */
void printArray(int arr[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d ", arr[i]);
    printf("n");
}

// Driver program to test above functions
int main()
{
    int arr[] = {2,2,2,2,2,2};
    int n = sizeof(arr)/sizeof(arr[0]);
    quickSort(arr, 0, n-1);
    printf("Sorted array:");
    printArray(arr, n);
    return 0;
}



















/*
 * CSE 2032: Advanced Algorithms Lab
 * Quick Sort [First Element as pivot]
 *
 * Task 1: Understand the code thoroughly and add comments on each line (3.5 Marks)
 * Task 2: Take random numbers as input [Range(0-99)] (3.5 Marks)
 * Task 3: Convert the code from descending to ascending order (3 Marks)
*/
#include <stdio.h>

int array[1000],low,high;

 void swap(int* x, int* y){

        int temp = *x;
        *x = *y;
        *y = temp;
}

 int partition (int arr[], int low, int high)
{
    int pivot = arr[high]; // pivot
    int i = (low - 1); // Index of smaller element

    for (int j = low; j <= high- 1; j++)
    {
        // If current element is smaller than or
        // equal to pivot
        if (array[j] <= pivot)
        {
            i++; // increment index of smaller element
            swap(&array[i], &array[j]);
        }
    }
    swap(&array[i + 1], &array[high]);
    return (i + 1);
}

void quicksort(int array[],int pivot, int last)
{
if(pivot<last){
    int prti = partition(array, pivot, last);
    quicksort(array,pivot,prti-1);
    quicksort(array,prti+1,last);
}

 /*    if(pivot<last)
    {
        low=pivot+1;
        high=last;
        while(array[low]<array[pivot])
            low++;
        while(array[high]>array[pivot])
            high--;
        while(low<high)
        {
            temp=array[high];
            array[high]=array[low];
            array[low]=temp;

            while(array[low]<array[pivot])
                low++;
            while(array[high]>array[pivot])
                high--;
        }
        temp=array[high];
        array[high]=array[pivot];
        array[pivot]=temp;
        quicksort(pivot,high-1);
        quicksort(high+1,last);
    }

    */
}
int main()
{
    int n,i;

    printf("Input the size of the array :");
    scanf("%d",&n);

    printf("\n\nEnter each element: \n\n");
    for(i=0; i<n; i++)
    {
        scanf("%d",&array[i]);
    }

    quicksort(array,0,n-1);

    printf("\n\nAfter Sorting: \n\n");
    for(i=0; i<n; i++)
        printf("%d ",array[i]);

    return 0;
}